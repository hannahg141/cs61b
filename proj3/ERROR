HI! SO I am failing these 3 tests in the same way. Lovely!

they are
    test33-merge-no-conflicts
    test34-merge-conflicts
    test35-merge-rm-conflicts

    (I have posted them below for reference)

For 34 & 35, I fail on the line where it says * g.txt --> g isn't supposed to exist but for some reason, it does! gross
for 33, I was originally failing on line 26 (the same error as tests 34 and 35) but somehow I managed to fix it.
    now, i am failing on line 27 right after where it is checking that h.txt does in fact = the data of wug2 (= h.txt wug2.txt).
    mine doesn't. SOS!!!

i have debugged this same issue for ever, and im ***Pretty sure it isnt in add or remove, but likely checkout / merge /
and maybe even in add or remove. Please help!! I'm hoping this fix will fix it for all of them.

To motivate you helping me, i have already formatted my logs for how they need to be for a merge log, and my status
has consistently been working. That means this is FINGERS CROSSED my last bug (disregarding reset -- i'm figuring that out now)

Thanks!!

test33-merge-no-conflicts: ERROR (file h.txt has incorrect content)
             Error on line 27 of test33-merge-no-conflicts.in
         -------------------- test33-merge-no-conflicts.in --------------------
          1. # Create two branches and merge other into master.
          2. I setup2.inc
          3. > branch other
          4. <<<
          5. + h.txt wug2.txt
          6. > add h.txt
          7. <<<
          8. > rm g.txt
          9. <<<
         10. > commit "Add h.txt and remove g.txt"
         11. <<<
         12. > checkout other
         13. <<<
         14. > rm f.txt
         15. <<<
         16. + k.txt wug3.txt
         17. > add k.txt
         18. <<<
         19. > commit "Add k.txt and remove f.txt"
         20. <<<
         21. > checkout master
         22. <<<
         23. > merge other
         24. <<<
         25. * f.txt
         26. * g.txt
         27. = h.txt wug2.txt
         28. = k.txt wug3.txt
         29. > log
         30. ===
         31. ${COMMIT_HEAD}
         32. Merged other into master\.
         33.
         34. ${ARBLINES}
         35. <<<*
         36. I blank-status2.inc
         ----------------------------------------------------------------------
         -------------------- setup2.inc --------------------
         1. # Set up one commit with two files.
         2. I setup1.inc
         3. > commit "Two files"
         4. <<<
         ----------------------------------------------------
         -------------------- setup1.inc --------------------
         1. # Initialize and add two files.
         2. I prelude1.inc
         3. + f.txt wug.txt
         4. + g.txt notwug.txt
         5. > add g.txt
         6. <<<
         7. > add f.txt
         8. <<<
         ----------------------------------------------------
         -------------------- prelude1.inc --------------------
         1. # Standard commands and definitions
         2. > init
         3. <<<
         4. D DATE "Date: \w\w\w \w\w\w \d+ \d\d:\d\d:\d\d \d\d\d\d [-+]\d\d\d\d"
         5. # A status log header RE.  Captures the commit id in its sole group.
         6. D COMMIT_HEAD "commit ([a-f0-9]+)[ \t]*\n(?:Merge:\s+[0-9a-f]{7}\s+[0-9a-f]{7}[ ]*\n)?${DATE}"
         7. # A full log entry.  Captures the entry. Assume logs messages don't contain
         8. # "==="
         9. D COMMIT_LOG "(===[ ]*\ncommit [a-f0-9]+[ ]*\n(?:Merge:\s+[0-9a-f]{7}\s+[0-9a-f]{7}[ ]*\n)?${DATE}[ ]*\n(?:.|\n)*?(?=\Z|\n===))"
         10. # An arbitrary line of text (works even with ?s)
         11. D ARBLINE "[^\n]*(?=\n|\Z)"
         12. # Zero or more arbitrary full lines of text.
         13. D ARBLINES "(?:(?:.|\n)*(?:\n|\Z)|\A|\Z)"
         ------------------------------------------------------
         test34-merge-conflicts: ERROR (file g.txt present)
             Error on line 36 of test34-merge-conflicts.in
         -------------------- test34-merge-conflicts.in --------------------
          1. # Create two branches and merge other into master with a merge conflict.
          2. I setup2.inc
          3. > branch other
          4. <<<
          5. + h.txt wug2.txt
          6. > add h.txt
          7. <<<
          8. > rm g.txt
          9. <<<
         10. + f.txt wug2.txt
         11. > add f.txt
         12. <<<
         13. > commit "Add h.txt, remove g.txt, and change f.txt"
         14. <<<
         15. > checkout other
         16. <<<
         17. + f.txt notwug.txt
         18. > add f.txt
         19. <<<
         20. + k.txt wug3.txt
         21. > add k.txt
         22. <<<
         23. > commit "Add k.txt and modify f.txt"
         24. <<<
         25. > checkout master
         26. <<<
         27. > log
         28. ===
         29. ${COMMIT_HEAD}
         30. ${ARBLINES}
         31. <<<*
         32. D MASTER_HEAD "${1}"
         33. > merge other
         34. Encountered a merge conflict.
         35. <<<
         36. * g.txt
         37. = h.txt wug2.txt
         38. = k.txt wug3.txt
         39. = f.txt conflict1.txt
         40. > log
         41. ${COMMIT_LOG}
         42. ===
         43. commit ${MASTER_HEAD}
         44. ${ARBLINES}
         45. <<<*
         46. > status
         47. === Branches ===
         48. \*master
         49. other
         50.
         51. === Staged Files ===
         52.
         53. === Removed Files ===
         54.
         55. === Modifications Not Staged For Commit ===
         56.
         57. === Untracked Files ===
         58.
         59. <<<*
         60.
         -------------------------------------------------------------------
         -------------------- setup2.inc --------------------
         1. # Set up one commit with two files.
         2. I setup1.inc
         3. > commit "Two files"
         4. <<<
         ----------------------------------------------------
         -------------------- setup1.inc --------------------
         1. # Initialize and add two files.
         2. I prelude1.inc
         3. + f.txt wug.txt
         4. + g.txt notwug.txt
         5. > add g.txt
         6. <<<
         7. > add f.txt
         8. <<<
         ----------------------------------------------------
         -------------------- prelude1.inc --------------------
         1. # Standard commands and definitions
         2. > init
         3. <<<
         4. D DATE "Date: \w\w\w \w\w\w \d+ \d\d:\d\d:\d\d \d\d\d\d [-+]\d\d\d\d"
         5. # A status log header RE.  Captures the commit id in its sole group.
         6. D COMMIT_HEAD "commit ([a-f0-9]+)[ \t]*\n(?:Merge:\s+[0-9a-f]{7}\s+[0-9a-f]{7}[ ]*\n)?${DATE}"
         7. # A full log entry.  Captures the entry. Assume logs messages don't contain
         8. # "==="
         9. D COMMIT_LOG "(===[ ]*\ncommit [a-f0-9]+[ ]*\n(?:Merge:\s+[0-9a-f]{7}\s+[0-9a-f]{7}[ ]*\n)?${DATE}[ ]*\n(?:.|\n)*?(?=\Z|\n===))"
         10. # An arbitrary line of text (works even with ?s)
         11. D ARBLINE "[^\n]*(?=\n|\Z)"
         12. # Zero or more arbitrary full lines of text.
         13. D ARBLINES "(?:(?:.|\n)*(?:\n|\Z)|\A|\Z)"
         ------------------------------------------------------
         test35-merge-rm-conflicts: ERROR (file g.txt present)
             Error on line 36 of test35-merge-rm-conflicts.in
         -------------------- test35-merge-rm-conflicts.in --------------------
          1. # Create two branches and merge other into master with a conflict caused by
          2. # a file changed in one and removed in the other.
          3. I setup2.inc
          4. > branch other
          5. <<<
          6. + h.txt wug2.txt
          7. > add h.txt
          8. <<<
          9. > rm g.txt
         10. <<<
         11. + f.txt wug2.txt
         12. > add f.txt
         13. <<<
         14. > commit "Add h.txt, remove g.txt, and change f.txt"
         15. <<<
         16. > checkout other
         17. <<<
         18. > rm f.txt
         19. <<<
         20. + k.txt wug3.txt
         21. > add k.txt
         22. <<<
         23. > commit "Add k.txt and remove f.txt"
         24. <<<
         25. > checkout master
         26. <<<
         27. > log
         28. ===
         29. ${COMMIT_HEAD}
         30. ${ARBLINES}
         31. <<<*
         32. D MASTER_HEAD "${1}"
         33. > merge other
         34. Encountered a merge conflict.
         35. <<<
         36. * g.txt
         37. = h.txt wug2.txt
         38. = k.txt wug3.txt
         39. = f.txt conflict2.txt
         40. > log
         41. ${COMMIT_LOG}
         42. ===
         43. commit ${MASTER_HEAD}
         44. ${ARBLINES}
         45. <<<*
         46. > status
         47. === Branches ===
         48. \*master
         49. other
         50.
         51. === Staged Files ===
         52.
         53. === Removed Files ===
         54.
         55. === Modifications Not Staged For Commit ===
         56.
         57. === Untracked Files ===
         58.
         59. <<<*
         60.
         ----------------------------------------------------------------------
         -------------------- setup2.inc --------------------
         1. # Set up one commit with two files.
         2. I setup1.inc
         3. > commit "Two files"
         4. <<<
         ----------------------------------------------------
         -------------------- setup1.inc --------------------
         1. # Initialize and add two files.
         2. I prelude1.inc
         3. + f.txt wug.txt
         4. + g.txt notwug.txt
         5. > add g.txt
         6. <<<
         7. > add f.txt
         8. <<<
         ----------------------------------------------------
         -------------------- prelude1.inc --------------------
         1. # Standard commands and definitions
         2. > init
         3. <<<
         4. D DATE "Date: \w\w\w \w\w\w \d+ \d\d:\d\d:\d\d \d\d\d\d [-+]\d\d\d\d"
         5. # A status log header RE.  Captures the commit id in its sole group.
         6. D COMMIT_HEAD "commit ([a-f0-9]+)[ \t]*\n(?:Merge:\s+[0-9a-f]{7}\s+[0-9a-f]{7}[ ]*\n)?${DATE}"
         7. # A full log entry.  Captures the entry. Assume logs messages don't contain
         8. # "==="
         9. D COMMIT_LOG "(===[ ]*\ncommit [a-f0-9]+[ ]*\n(?:Merge:\s+[0-9a-f]{7}\s+[0-9a-f]{7}[ ]*\n)?${DATE}[ ]*\n(?:.|\n)*?(?=\Z|\n===))"
         10. # An arbitrary line of text (works even with ?s)
         11. D ARBLINE "[^\n]*(?=\n|\Z)"
         12. # Zero or more arbitrary full lines of text.
         13. D ARBLINES "(?:(?:.|\n)*(?:\n|\Z)|\A|\Z)"